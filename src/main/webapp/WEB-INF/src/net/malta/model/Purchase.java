// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package net.malta.model;

/**
 * 
 */
public abstract class Purchase
    implements java.io.Serializable
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -7552945486378059660L;

    private java.lang.Integer id;
    

    /**
     * 
     */
    public java.lang.Integer getId()
    {
        return this.id;
    }

    public void setId(java.lang.Integer id)
    {
        this.id = id;
    }

    private int total;

    /**
     * 
     */
    public int getTotal()
    {
        return this.total;
    }

    public void setTotal(int total)
    {
        this.total = total;
    }

    private int carriage;

    /**
     * 
     */
    public int getCarriage()
    {
        return this.carriage;
    }

    public void setCarriage(int carriage)
    {
        this.carriage = carriage;
    }

    private int totalordernum;

    /**
     * 
     */
    public int getTotalordernum()
    {
        return this.totalordernum;
    }

    public void setTotalordernum(int totalordernum)
    {
        this.totalordernum = totalordernum;
    }

    private boolean shipped;

    /**
     * 
     */
    public boolean isShipped()
    {
        return this.shipped;
    }

    public void setShipped(boolean shipped)
    {
        this.shipped = shipped;
    }

    private java.util.Date date;

    /**
     * 
     */
    public java.util.Date getDate()
    {
        return this.date;
    }

    public void setDate(java.util.Date date)
    {
        this.date = date;
    }

    private boolean temp;

    /**
     * 
     */
    public boolean isTemp()
    {
        return this.temp;
    }

    public void setTemp(boolean temp)
    {
        this.temp = temp;
    }

    private boolean cancelled;

    /**
     * 
     */
    public boolean isCancelled()
    {
        return this.cancelled;
    }

    public void setCancelled(boolean cancelled)
    {
        this.cancelled = cancelled;
    }

    private boolean removed;

    /**
     * 
     */
    public boolean isRemoved()
    {
        return this.removed;
    }

    public void setRemoved(boolean removed)
    {
        this.removed = removed;
    }

    private net.malta.model.PublicUser publicUser;

    /**
     * 
     */
    public net.malta.model.PublicUser getPublicUser()
    {
        return this.publicUser;
    }

    public void setPublicUser(net.malta.model.PublicUser publicUser)
    {
        this.publicUser = publicUser;
    }

    private java.util.Collection choises = new java.util.HashSet();

    /**
     * 
     */
    public java.util.Collection getChoises()
    {
        return this.choises;
    }

    public void setChoises(java.util.Collection choises)
    {
        this.choises = choises;
    }

    private net.malta.model.PaymentMethod paymentMethod;

    /**
     * 
     */
    public net.malta.model.PaymentMethod getPaymentMethod()
    {
        return this.paymentMethod;
    }

    public void setPaymentMethod(net.malta.model.PaymentMethod paymentMethod)
    {
        this.paymentMethod = paymentMethod;
    }

    /**
     * Returns <code>true</code> if the argument is an Purchase instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof Purchase))
        {
            return false;
        }
        final Purchase that = (Purchase)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (id == null ? 0 : id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link net.malta.model.Purchase}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link net.malta.model.Purchase}.
         */
        public static net.malta.model.Purchase newInstance()
        {
            return new net.malta.model.PurchaseImpl();
        }

        /**
         * Constructs a new instance of {@link net.malta.model.Purchase}, taking all required and/or
         * read-only properties as arguments.
         */
        public static net.malta.model.Purchase newInstance(int total, int carriage, int totalordernum, boolean shipped, java.util.Date date, boolean temp, boolean cancelled, boolean removed)
        {
            final net.malta.model.Purchase entity = new net.malta.model.PurchaseImpl();
            entity.setTotal(total);
            entity.setCarriage(carriage);
            entity.setTotalordernum(totalordernum);
            entity.setShipped(shipped);
            entity.setDate(date);
            entity.setTemp(temp);
            entity.setCancelled(cancelled);
            entity.setRemoved(removed);
            return entity;
        }

        /**
         * Constructs a new instance of {@link net.malta.model.Purchase}, taking all possible properties
         * (except the identifier(s))as arguments.
         */
        public static net.malta.model.Purchase newInstance(int total, int carriage, int totalordernum, boolean shipped, java.util.Date date, boolean temp, boolean cancelled, boolean removed, net.malta.model.PublicUser publicUser, java.util.Collection choises, net.malta.model.PaymentMethod paymentMethod)
        {
            final net.malta.model.Purchase entity = new net.malta.model.PurchaseImpl();
            entity.setTotal(total);
            entity.setCarriage(carriage);
            entity.setTotalordernum(totalordernum);
            entity.setShipped(shipped);
            entity.setDate(date);
            entity.setTemp(temp);
            entity.setCancelled(cancelled);
            entity.setRemoved(removed);
            entity.setPublicUser(publicUser);
            entity.setChoises(choises);
            entity.setPaymentMethod(paymentMethod);
            return entity;
        }
    }
    
// HibernateEntity.vsl merge-point
}