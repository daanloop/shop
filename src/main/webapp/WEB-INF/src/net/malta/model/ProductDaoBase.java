// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
package net.malta.model;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>net.malta.model.Product</code>.
 * </p>
 *
 * @see net.malta.model.Product
 */
public abstract class ProductDaoBase
    extends org.springframework.orm.hibernate3.support.HibernateDaoSupport
    implements net.malta.model.ProductDao
{

    /**
     * @see net.malta.model.ProductDao#load(int, java.lang.Integer)
     */
    public java.lang.Object load(final int transform, final java.lang.Integer id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Product.load - 'id' can not be null");
        }
        final java.lang.Object entity = this.getHibernateTemplate().get(net.malta.model.ProductImpl.class, id);
        return transformEntity(transform, (net.malta.model.Product)entity);
    }

    /**
     * @see net.malta.model.ProductDao#load(java.lang.Integer)
     */
    public net.malta.model.Product load(java.lang.Integer id)
    {
        return (net.malta.model.Product)this.load(TRANSFORM_NONE, id);
    }

    /**
     * @see net.malta.model.ProductDao#loadAll()
     */
    public java.util.Collection loadAll()
    {
        return this.loadAll(TRANSFORM_NONE);
    }

    /**
     * @see net.malta.model.ProductDao#loadAll(int)
     */
    public java.util.Collection loadAll(final int transform)
    {
        final java.util.Collection results = this.getHibernateTemplate().loadAll(net.malta.model.ProductImpl.class);
        this.transformEntities(transform, results);
        return results;
    }


    /**
     * @see net.malta.model.ProductDao#create(net.malta.model.Product)
     */
    public net.malta.model.Product create(net.malta.model.Product product)
    {
        return (net.malta.model.Product)this.create(TRANSFORM_NONE, product);
    }

    /**
     * @see net.malta.model.ProductDao#create(int transform, net.malta.model.Product)
     */
    public java.lang.Object create(final int transform, final net.malta.model.Product product)
    {
        if (product == null)
        {
            throw new IllegalArgumentException(
                "Product.create - 'product' can not be null");
        }
        this.getHibernateTemplate().save(product);
        return this.transformEntity(transform, product);
    }

    /**
     * @see net.malta.model.ProductDao#create(java.util.Collection)
     */
    public java.util.Collection create(final java.util.Collection entities)
    {
        return create(TRANSFORM_NONE, entities);
    }

    /**
     * @see net.malta.model.ProductDao#create(int, java.util.Collection)
     */
    public java.util.Collection create(final int transform, final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Product.create - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public java.lang.Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        create(transform, (net.malta.model.Product)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
        return entities;
    }

    /**
     * @see net.malta.model.ProductDao#create(java.lang.String, java.lang.String, java.util.Date, boolean, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, boolean, java.lang.String, java.lang.String)
     */
    public net.malta.model.Product create(
        java.lang.String no,
        java.lang.String name,
        java.util.Date date,
        boolean pub,
        int pricewithtax,
        java.lang.String size,
        java.lang.String material,
        java.lang.String catchcopy,
        java.lang.String description,
        java.lang.String note,
        int stocknum,
        boolean removed,
        java.lang.String mainitemname,
        java.lang.String english)
    {
        return (net.malta.model.Product)this.create(TRANSFORM_NONE, no, name, date, pub, pricewithtax, size, material, catchcopy, description, note, stocknum, removed, mainitemname, english);
    }

    /**
     * @see net.malta.model.ProductDao#create(int, java.lang.String, java.lang.String, java.util.Date, boolean, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, boolean, java.lang.String, java.lang.String)
     */
    public java.lang.Object create(
        final int transform,
        java.lang.String no,
        java.lang.String name,
        java.util.Date date,
        boolean pub,
        int pricewithtax,
        java.lang.String size,
        java.lang.String material,
        java.lang.String catchcopy,
        java.lang.String description,
        java.lang.String note,
        int stocknum,
        boolean removed,
        java.lang.String mainitemname,
        java.lang.String english)
    {
        net.malta.model.Product entity = new net.malta.model.ProductImpl();
        entity.setNo(no);
        entity.setName(name);
        entity.setDate(date);
        entity.setPub(pub);
        entity.setPricewithtax(pricewithtax);
        entity.setSize(size);
        entity.setMaterial(material);
        entity.setCatchcopy(catchcopy);
        entity.setDescription(description);
        entity.setNote(note);
        entity.setStocknum(stocknum);
        entity.setRemoved(removed);
        entity.setMainitemname(mainitemname);
        entity.setEnglish(english);
        return this.create(transform, entity);
    }

    /**
     * @see net.malta.model.ProductDao#update(net.malta.model.Product)
     */
    public void update(net.malta.model.Product product)
    {
        if (product == null)
        {
            throw new IllegalArgumentException(
                "Product.update - 'product' can not be null");
        }
        this.getHibernateTemplate().update(product);
    }

    /**
     * @see net.malta.model.ProductDao#update(java.util.Collection)
     */
    public void update(final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Product.update - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public java.lang.Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        update((net.malta.model.Product)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
    }

    /**
     * @see net.malta.model.ProductDao#remove(net.malta.model.Product)
     */
    public void remove(net.malta.model.Product product)
    {
        if (product == null)
        {
            throw new IllegalArgumentException(
                "Product.remove - 'product' can not be null");
        }
        this.getHibernateTemplate().delete(product);
    }

    /**
     * @see net.malta.model.ProductDao#remove(java.lang.Integer)
     */
    public void remove(java.lang.Integer id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Product.remove - 'id' can not be null");
        }
        net.malta.model.Product entity = this.load(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * @see net.malta.model.ProductDao#remove(java.util.Collection)
     */
    public void remove(java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Product.remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }
    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>net.malta.model.ProductDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link net.malta.model.ProductDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,java.util.Collection)
     */
    protected java.lang.Object transformEntity(final int transform, final net.malta.model.Product entity)
    {
        java.lang.Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,net.malta.model.Product)}
     * method. This method does not instantiate a new collection.
     * <p/>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>net.malta.model.ProductDao</code>
     * @param entities the collection of entities to transform
     * @see #transformEntity(int,net.malta.model.Product)
     */
    protected void transformEntities(final int transform, final java.util.Collection entities)
    {
        switch (transform)
        {
            case TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

}