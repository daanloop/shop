// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
package net.malta.model;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>net.malta.model.Item</code>.
 * </p>
 *
 * @see net.malta.model.Item
 */
public abstract class ItemDaoBase
    extends org.springframework.orm.hibernate3.support.HibernateDaoSupport
    implements net.malta.model.ItemDao
{

    /**
     * @see net.malta.model.ItemDao#load(int, java.lang.Integer)
     */
    public java.lang.Object load(final int transform, final java.lang.Integer id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Item.load - 'id' can not be null");
        }
        final java.lang.Object entity = this.getHibernateTemplate().get(net.malta.model.ItemImpl.class, id);
        return transformEntity(transform, (net.malta.model.Item)entity);
    }

    /**
     * @see net.malta.model.ItemDao#load(java.lang.Integer)
     */
    public net.malta.model.Item load(java.lang.Integer id)
    {
        return (net.malta.model.Item)this.load(TRANSFORM_NONE, id);
    }

    /**
     * @see net.malta.model.ItemDao#loadAll()
     */
    public java.util.Collection loadAll()
    {
        return this.loadAll(TRANSFORM_NONE);
    }

    /**
     * @see net.malta.model.ItemDao#loadAll(int)
     */
    public java.util.Collection loadAll(final int transform)
    {
        final java.util.Collection results = this.getHibernateTemplate().loadAll(net.malta.model.ItemImpl.class);
        this.transformEntities(transform, results);
        return results;
    }


    /**
     * @see net.malta.model.ItemDao#create(net.malta.model.Item)
     */
    public net.malta.model.Item create(net.malta.model.Item item)
    {
        return (net.malta.model.Item)this.create(TRANSFORM_NONE, item);
    }

    /**
     * @see net.malta.model.ItemDao#create(int transform, net.malta.model.Item)
     */
    public java.lang.Object create(final int transform, final net.malta.model.Item item)
    {
        if (item == null)
        {
            throw new IllegalArgumentException(
                "Item.create - 'item' can not be null");
        }
        this.getHibernateTemplate().save(item);
        return this.transformEntity(transform, item);
    }

    /**
     * @see net.malta.model.ItemDao#create(java.util.Collection)
     */
    public java.util.Collection create(final java.util.Collection entities)
    {
        return create(TRANSFORM_NONE, entities);
    }

    /**
     * @see net.malta.model.ItemDao#create(int, java.util.Collection)
     */
    public java.util.Collection create(final int transform, final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Item.create - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public java.lang.Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        create(transform, (net.malta.model.Item)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
        return entities;
    }

    /**
     * @see net.malta.model.ItemDao#create(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, boolean)
     */
    public net.malta.model.Item create(
        java.lang.String no,
        java.lang.String name,
        int pricewithtax,
        java.lang.String size,
        java.lang.String material,
        java.lang.String catchcopy,
        java.lang.String description,
        java.lang.String note,
        int stocknum,
        boolean main)
    {
        return (net.malta.model.Item)this.create(TRANSFORM_NONE, no, name, pricewithtax, size, material, catchcopy, description, note, stocknum, main);
    }

    /**
     * @see net.malta.model.ItemDao#create(int, java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, boolean)
     */
    public java.lang.Object create(
        final int transform,
        java.lang.String no,
        java.lang.String name,
        int pricewithtax,
        java.lang.String size,
        java.lang.String material,
        java.lang.String catchcopy,
        java.lang.String description,
        java.lang.String note,
        int stocknum,
        boolean main)
    {
        net.malta.model.Item entity = new net.malta.model.ItemImpl();
        entity.setNo(no);
        entity.setName(name);
        entity.setPricewithtax(pricewithtax);
        entity.setSize(size);
        entity.setMaterial(material);
        entity.setCatchcopy(catchcopy);
        entity.setDescription(description);
        entity.setNote(note);
        entity.setStocknum(stocknum);
        entity.setMain(main);
        return this.create(transform, entity);
    }

    /**
     * @see net.malta.model.ItemDao#create(java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, net.malta.model.Product, java.lang.String, int)
     */
    public net.malta.model.Item create(
        java.lang.String catchcopy,
        java.lang.String description,
        boolean main,
        java.lang.String material,
        java.lang.String name,
        java.lang.String no,
        java.lang.String note,
        int pricewithtax,
        net.malta.model.Product product,
        java.lang.String size,
        int stocknum)
    {
        return (net.malta.model.Item)this.create(TRANSFORM_NONE, catchcopy, description, main, material, name, no, note, pricewithtax, product, size, stocknum);
    }

    /**
     * @see net.malta.model.ItemDao#create(int, java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, net.malta.model.Product, java.lang.String, int)
     */
    public java.lang.Object create(
        final int transform,
        java.lang.String catchcopy,
        java.lang.String description,
        boolean main,
        java.lang.String material,
        java.lang.String name,
        java.lang.String no,
        java.lang.String note,
        int pricewithtax,
        net.malta.model.Product product,
        java.lang.String size,
        int stocknum)
    {
        net.malta.model.Item entity = new net.malta.model.ItemImpl();
        entity.setCatchcopy(catchcopy);
        entity.setDescription(description);
        entity.setMain(main);
        entity.setMaterial(material);
        entity.setName(name);
        entity.setNo(no);
        entity.setNote(note);
        entity.setPricewithtax(pricewithtax);
        entity.setProduct(product);
        entity.setSize(size);
        entity.setStocknum(stocknum);
        return this.create(transform, entity);
    }

    /**
     * @see net.malta.model.ItemDao#update(net.malta.model.Item)
     */
    public void update(net.malta.model.Item item)
    {
        if (item == null)
        {
            throw new IllegalArgumentException(
                "Item.update - 'item' can not be null");
        }
        this.getHibernateTemplate().update(item);
    }

    /**
     * @see net.malta.model.ItemDao#update(java.util.Collection)
     */
    public void update(final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Item.update - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public java.lang.Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        update((net.malta.model.Item)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
    }

    /**
     * @see net.malta.model.ItemDao#remove(net.malta.model.Item)
     */
    public void remove(net.malta.model.Item item)
    {
        if (item == null)
        {
            throw new IllegalArgumentException(
                "Item.remove - 'item' can not be null");
        }
        this.getHibernateTemplate().delete(item);
    }

    /**
     * @see net.malta.model.ItemDao#remove(java.lang.Integer)
     */
    public void remove(java.lang.Integer id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Item.remove - 'id' can not be null");
        }
        net.malta.model.Item entity = this.load(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * @see net.malta.model.ItemDao#remove(java.util.Collection)
     */
    public void remove(java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Item.remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }
    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>net.malta.model.ItemDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link net.malta.model.ItemDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,java.util.Collection)
     */
    protected java.lang.Object transformEntity(final int transform, final net.malta.model.Item entity)
    {
        java.lang.Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,net.malta.model.Item)}
     * method. This method does not instantiate a new collection.
     * <p/>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>net.malta.model.ItemDao</code>
     * @param entities the collection of entities to transform
     * @see #transformEntity(int,net.malta.model.Item)
     */
    protected void transformEntities(final int transform, final java.util.Collection entities)
    {
        switch (transform)
        {
            case TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

}