// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEntity.vsl in andromda-hibernate-cartridge.
//
package net.malta.model;

/**
 * 
 */
public abstract class Item
    implements java.io.Serializable
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -7068755093569395691L;

    private java.lang.Integer id;

    /**
     * 
     */
    public java.lang.Integer getId()
    {
        return this.id;
    }

    public void setId(java.lang.Integer id)
    {
        this.id = id;
    }

    private java.lang.String no;

    /**
     * 
     */
    public java.lang.String getNo()
    {
        return this.no;
    }

    public void setNo(java.lang.String no)
    {
        this.no = no;
    }

    private java.lang.String name;

    /**
     * 
     */
    public java.lang.String getName()
    {
        return this.name;
    }

    public void setName(java.lang.String name)
    {
        this.name = name;
    }

    private int pricewithtax;

    /**
     * 
     */
    public int getPricewithtax()
    {
        return this.pricewithtax;
    }

    public void setPricewithtax(int pricewithtax)
    {
        this.pricewithtax = pricewithtax;
    }

    private java.lang.String size;

    /**
     * 
     */
    public java.lang.String getSize()
    {
        return this.size;
    }

    public void setSize(java.lang.String size)
    {
        this.size = size;
    }

    private java.lang.String material;

    /**
     * 
     */
    public java.lang.String getMaterial()
    {
        return this.material;
    }

    public void setMaterial(java.lang.String material)
    {
        this.material = material;
    }

    private java.lang.String catchcopy;

    /**
     * 
     */
    public java.lang.String getCatchcopy()
    {
        return this.catchcopy;
    }

    public void setCatchcopy(java.lang.String catchcopy)
    {
        this.catchcopy = catchcopy;
    }

    private java.lang.String description;

    /**
     * 
     */
    public java.lang.String getDescription()
    {
        return this.description;
    }

    public void setDescription(java.lang.String description)
    {
        this.description = description;
    }

    private java.lang.String note;

    /**
     * 
     */
    public java.lang.String getNote()
    {
        return this.note;
    }

    public void setNote(java.lang.String note)
    {
        this.note = note;
    }

    private int stocknum;

    /**
     * 
     */
    public int getStocknum()
    {
        return this.stocknum;
    }

    public void setStocknum(int stocknum)
    {
        this.stocknum = stocknum;
    }

    private boolean main;

    /**
     * 
     */
    public boolean isMain()
    {
        return this.main;
    }

    public void setMain(boolean main)
    {
        this.main = main;
    }

    private net.malta.model.Product product;

    /**
     * 
     */
    public net.malta.model.Product getProduct()
    {
        return this.product;
    }

    public void setProduct(net.malta.model.Product product)
    {
        this.product = product;
    }

    private java.util.Collection choises = new java.util.HashSet();

    /**
     * 
     */
    public java.util.Collection getChoises()
    {
        return this.choises;
    }

    public void setChoises(java.util.Collection choises)
    {
        this.choises = choises;
    }

    private net.malta.model.Carriage carriage;

    /**
     * 
     */
    public net.malta.model.Carriage getCarriage()
    {
        return this.carriage;
    }

    public void setCarriage(net.malta.model.Carriage carriage)
    {
        this.carriage = carriage;
    }

    private net.malta.model.Attachment zoom;

    /**
     * 
     */
    public net.malta.model.Attachment getZoom()
    {
        return this.zoom;
    }

    public void setZoom(net.malta.model.Attachment zoom)
    {
        this.zoom = zoom;
    }

    private java.util.Collection detailed = new java.util.HashSet();

    /**
     * 
     */
    public java.util.Collection getDetailed()
    {
        return this.detailed;
    }

    public void setDetailed(java.util.Collection detailed)
    {
        this.detailed = detailed;
    }

    private net.malta.model.Attachment defaultattachment;

    /**
     * 
     */
    public net.malta.model.Attachment getDefaultattachment()
    {
        return this.defaultattachment;
    }

    public void setDefaultattachment(net.malta.model.Attachment defaultattachment)
    {
        this.defaultattachment = defaultattachment;
    }

    /**
     * Returns <code>true</code> if the argument is an Item instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof Item))
        {
            return false;
        }
        final Item that = (Item)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (id == null ? 0 : id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link net.malta.model.Item}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link net.malta.model.Item}.
         */
        public static net.malta.model.Item newInstance()
        {
            return new net.malta.model.ItemImpl();
        }

        /**
         * Constructs a new instance of {@link net.malta.model.Item}, taking all required and/or
         * read-only properties as arguments.
         */
        public static net.malta.model.Item newInstance(java.lang.String no, java.lang.String name, int pricewithtax, java.lang.String size, java.lang.String material, java.lang.String catchcopy, java.lang.String description, java.lang.String note, int stocknum, boolean main, net.malta.model.Product product)
        {
            final net.malta.model.Item entity = new net.malta.model.ItemImpl();
            entity.setNo(no);
            entity.setName(name);
            entity.setPricewithtax(pricewithtax);
            entity.setSize(size);
            entity.setMaterial(material);
            entity.setCatchcopy(catchcopy);
            entity.setDescription(description);
            entity.setNote(note);
            entity.setStocknum(stocknum);
            entity.setMain(main);
            entity.setProduct(product);
            return entity;
        }

        /**
         * Constructs a new instance of {@link net.malta.model.Item}, taking all possible properties
         * (except the identifier(s))as arguments.
         */
        public static net.malta.model.Item newInstance(java.lang.String no, java.lang.String name, int pricewithtax, java.lang.String size, java.lang.String material, java.lang.String catchcopy, java.lang.String description, java.lang.String note, int stocknum, boolean main, net.malta.model.Product product, java.util.Collection choises, net.malta.model.Carriage carriage, net.malta.model.Attachment zoom, java.util.Collection detailed, net.malta.model.Attachment defaultattachment)
        {
            final net.malta.model.Item entity = new net.malta.model.ItemImpl();
            entity.setNo(no);
            entity.setName(name);
            entity.setPricewithtax(pricewithtax);
            entity.setSize(size);
            entity.setMaterial(material);
            entity.setCatchcopy(catchcopy);
            entity.setDescription(description);
            entity.setNote(note);
            entity.setStocknum(stocknum);
            entity.setMain(main);
            entity.setProduct(product);
            entity.setChoises(choises);
            entity.setCarriage(carriage);
            entity.setZoom(zoom);
            entity.setDetailed(detailed);
            entity.setDefaultattachment(defaultattachment);
            return entity;
        }
    }
    
// HibernateEntity.vsl merge-point
}